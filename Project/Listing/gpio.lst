C51 COMPILER V9.00   GPIO                                                                  04/19/2017 13:53:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Output\gpio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\Libraries\sc51f3364_Periph_Driver\src\gpio.c BROWSE INCDIR(..\..\.
                    -.\Libraries\sc51f3364_Periph_Driver\inc;..\..\..\Libraries\sc51f3364_Periph_Driver\src;.\user\inc;.\user\src;..\IR_Sampl
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listing\gpio.lst) OBJECT(.\Output\gpio.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file      gpio.c
   4            * @author    MCU Application Team 
   5            * @version   V1.0.0
   6            * @date      14-Mar-2017
   7            * @brief     gpio functions
   8            *            History:
   9            *
  10            ******************************************************************************
  11            * @attention
  12            *
  13            * <h2><center>&copy; COPYRIGHT 2016 Silan Microelectronics </center></h2>
  14            *
  15            * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  16            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  17            * AS A RESULT, SLMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  18            * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  19            * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  20            * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  21            *
  22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25            * DISCLAIMED.
  26            * 
  27            ******************************************************************************
  28            */
  29          
  30          #include <INTRINS.H>
  31          #include "SC51F33XX.h"
  32          #include "sc51f33xx_sys.h"
  33          #include "sc51f33xx_hal_conf.h"
  34          #include "gpio.h"
  35          
  36          
  37          /**
  38            * @brief GPIO initialize function
  39            * @param PORTx: port name,select P0 can set it as PORT_P0
  40            * @param PinNum: the number of GPIO port which only choose form 0 to 7
  41            * @param IO_State: the state of GPIO port which contains GPIO direction and mode
  42            * @retval None
  43            * @note this function could be called like this:<GPIO_Init(PORT_P0,7,GPI_MODE_UP);>
  44            */
  45          void GPIO_Init(GPIO_PORTx PORTx,U8 PinNum,GPIO_CFG IO_State)
  46          {
  47   1          U8 x,y;
  48   1          U8 i,k;
  49   1          if(PORTx == PORT_P10)
  50   1          {
  51   2              if((IO_State & 0x02) >> 1)
  52   2                  RegBit_SET((2*PinNum + 1),xP10MDL);
  53   2              else RegBit_CLR((2*PinNum + 1),xP10MDL);
C51 COMPILER V9.00   GPIO                                                                  04/19/2017 13:53:50 PAGE 2   

  54   2              if(IO_State & 0x01)
  55   2                  RegBit_SET((2*PinNum),xP10MDL);
  56   2              else RegBit_CLR((2*PinNum),xP10MDL);
  57   2          }
  58   1          else
  59   1          {
  60   2              if(RegBit_GET(0,PinNum))
  61   2              {
  62   3                  x = IO_State;
  63   3              }
  64   2              else
  65   2              {
  66   3                  x = 0;
  67   3              }
  68   2              if(RegBit_GET(4,PinNum))
  69   2              {
  70   3                  y = IO_State;
  71   3              }
  72   2              else
  73   2              {
  74   3                  y = 0;
  75   3              }
  76   2              for(i = 1;i < 7;i++)
  77   2              {      
  78   3                  if(i < 4) k = (IO_State << (i << 1));
  79   3                  else k = (IO_State << ((i - 3) << 1));
  80   3                  if((RegBit_GET(i,PinNum)) && (i < 4))  
  81   3                  {
  82   4                      x |= k;
  83   4                  }
  84   3                  else if(RegBit_GET(i+1,PinNum))  y |= k; 
  85   3              }
  86   2              switch(PORTx) 
  87   2              {
  88   3                  case PORT_P0:
  89   3                      P0MDL = x;
  90   3                      P0MDH = y;
  91   3                      break;
  92   3                  case PORT_P1:
  93   3                      P1MDL = x;
  94   3                      P1MDH = y;
  95   3                      break;
  96   3                  case PORT_P2:
  97   3                      P2MDL = x;
  98   3                      P2MDH = y;
  99   3                      break;
 100   3                  case PORT_P3:
 101   3                      P3MDL = x;
 102   3                      P3MDH = y;
 103   3                  default:
 104   3                      break;
 105   3              }
 106   2          }
 107   1      }
 108          /**
 109            * @brief GPIO output state setting function
 110            * @param PORTx: port name,select P0 can set it as PORT_P0
 111                  * @param PinNum: the number of GPIO port which only choose form 0 to 7
 112            * @retval None
 113            * @note this function could be called like this:<GPIO_SetBits(PORT_P0,7);>
 114            */
 115          void GPIO_SetBits(GPIO_PORTx PORTx,U8 PinNum)
C51 COMPILER V9.00   GPIO                                                                  04/19/2017 13:53:50 PAGE 3   

 116          {
 117   1          switch(PORTx)
 118   1          {
 119   2              case PORT_P0:
 120   2                     RegBit_SET(PinNum,P0);
 121   2                     break;
 122   2              case PORT_P1:
 123   2                     RegBit_SET(PinNum,P1);
 124   2                     break;
 125   2              case PORT_P2:
 126   2                     RegBit_SET(PinNum,P2);
 127   2                     break;
 128   2              case PORT_P3:
 129   2                     RegBit_SET(PinNum,P3);
 130   2                     break;
 131   2              case PORT_P10:
 132   2                     RegBit_SET(PinNum,xP10);
 133   2                     break;
 134   2              default:
 135   2                     break;
 136   2          }
 137   1      }
 138          /**
 139            * @brief GPIO output state setting function
 140            * @param PORTx: port name,select P0 can set it as PORT_P0
 141                  * @param PinNum: the number of GPIO port which only choose form 0 to 7
 142            * @retval None
 143            * @note this function could be called like this:<GPIO_ResetBits(PORT_P0,7);>
 144            */
 145          void GPIO_ResetBits(GPIO_PORTx PORTx,U8 PinNum)
 146          {
 147   1          switch(PORTx)
 148   1          {
 149   2              case PORT_P0:
 150   2                     RegBit_CLR(PinNum,P0);
 151   2                     break;
 152   2              case PORT_P1:
 153   2                     RegBit_CLR(PinNum,P1);
 154   2                     break;
 155   2              case PORT_P2:
 156   2                     RegBit_CLR(PinNum,P2);
 157   2                     break;
 158   2              case PORT_P3:
 159   2                     RegBit_CLR(PinNum,P3);
 160   2                     break;
 161   2              case PORT_P10:
 162   2                     RegBit_CLR(PinNum,xP10);
 163   2                     break;
 164   2              default:
 165   2                     break;
 166   2          }
 167   1      }
 168          
 169          /******************** (C) COPYRIGHT Silan Microelectronics *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    455    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
C51 COMPILER V9.00   GPIO                                                                  04/19/2017 13:53:50 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
