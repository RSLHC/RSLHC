C51 COMPILER V9.00   UART                                                                  04/19/2017 13:52:39 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Output\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\Libraries\sc51f3364_Periph_Driver\src\uart.c BROWSE INCDIR(..\..\.
                    -.\Libraries\sc51f3364_Periph_Driver\inc;..\..\..\Libraries\sc51f3364_Periph_Driver\src;.\user\inc;.\user\src;..\IR_Sampl
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listing\uart.lst) OBJECT(.\Output\uart.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file      uart.c
   4            * @author    MCU Application Team 
   5            * @version   V1.0.0
   6            * @date      12-Oct-2016
   7            * @brief     uart functions
   8            *            History:
   9            *
  10            ******************************************************************************
  11            * @attention
  12            *
  13            * <h2><center>&copy; COPYRIGHT 2016 Silan Microelectronics </center></h2>
  14            *
  15            * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  16            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  17            * AS A RESULT, SLMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  18            * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  19            * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  20            * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  21            *
  22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25            * DISCLAIMED.
  26            * 
  27            ******************************************************************************
  28            */
  29            
  30          #include <INTRINS.H>
  31          #include "SC51F33XX.h"
  32          #include "sc51f33xx_sys.h"
  33          #include "sc51f33xx_hal_conf.h"
  34          #include "uart.h"
  35          
  36          /* Private array -------------------------------------------------------------*/
  37          /* 115200,57600,56000,38400,19200,14400,9600,4800 */
  38          const U8 code C_Uart_Brtime_Clk16MHz[] = {247,238,238,230,204,187,152,48};
  39          /* 115200,57600,56000,38400,19200,14400,9600,4800,2400 */
  40          const U8 code C_Uart_Brtime_Clk8MHz[] = {251,247,247,243,230,221,204,152,48};
  41          /**/
  42          U8 g_u8Uart0_IT_Flag,g_u8Uart0_RecTimes = 0,g_u8Check_Flag = 0;
  43          U8 ga_u8Rec_Buff[8]={0,0,0,0,0,0,0,0};
  44          
  45          /**
  46            * @brief Uart baudrate set
  47            * @param clk: FCLK divider to UART Module
  48            *     @arg UART_FCLK_16MHZ
  49            *     @arg UART_FCLK_8MHZ
  50            * @param baud: baudrate
  51            *     @arg UART_BAUD_115200
  52            *     @arg UART_BAUD_57600
  53            *     @arg UART_BAUD_56000
C51 COMPILER V9.00   UART                                                                  04/19/2017 13:52:39 PAGE 2   

  54            *     @arg UART_BAUD_38400
  55            *     @arg UART_BAUD_19200
  56            *     @arg UART_BAUD_14400
  57            *     @arg UART_BAUD_9600
  58            *     @arg UART_BAUD_4800
  59            *     @arg UART_BAUD_2400 (used in Fclk<=8MHz)
  60            * @retval SUCCESS(1) or FAIL(0)
  61            */
  62          bit Uart_Baud_Set(U8 clk, U8 baud)
  63          {
  64   1          BRCON0 |= 0x80;        /* SMOD=1 */
  65   1          if(baud<2)
  66   1              BRCON0 |= 0x04;    /* HPREN=1 */
  67   1          else
  68   1              BRCON0 &= 0xf7;    /* HPREN=0 */
  69   1              
  70   1          /* Baudrate register set */
  71   1          if(clk==UART_FCLK_16MHZ)
  72   1          {
  73   2              if(baud>=8)
  74   2                  return FALSE;
  75   2              BRTIM0 = C_Uart_Brtime_Clk16MHz[baud];
  76   2          }
  77   1          else if(clk==UART_FCLK_8MHZ)
  78   1          {
  79   2              if(baud>=9)
  80   2                  return FALSE;
  81   2              BRTIM0 = C_Uart_Brtime_Clk8MHz[baud];
  82   2          }
  83   1          else
  84   1          {
  85   2              return FALSE;
  86   2          }
  87   1          
  88   1          return TRUE;
  89   1      }
  90          
  91          /**
  92            * @brief Uart enable
  93            * @param entype
  94            *     @arg UART_REN_ENABLE
  95            *     @arg UART_BRT_ENABLE
  96            *     @arg UART_IOMUX_ENABLE
  97            * @note or use (UART_REN_ENABLE | UART_BRT_ENABLE | UART_IOMUX_ENABLE)
  98            * @retval None
  99            */
 100          
 101          void Uart_Enable(U8 entype)
 102          {
 103   1          SCON0 |= entype & UART_REN_ENABEL;
 104   1          BRCON0 |= entype & UART_BRT_ENABLE;
 105   1          xIOMUX0 |= entype & UART_IOMUX_ENABLE;
 106   1      }
 107          
 108          /**
 109            * @brief Uart Init
 110            * @param entype
 111            *     @arg UART_REN_ENABLE
 112            *     @arg UART_BRT_ENABLE
 113            *     @arg UART_IOMUX_ENABLE
 114            * @note or use (UART_REN_ENABLE | UART_BRT_ENABLE | UART_IOMUX_ENABLE)
 115            * @retval 0 or 1
C51 COMPILER V9.00   UART                                                                  04/19/2017 13:52:39 PAGE 3   

 116            */
 117          U8 Uart0Init(U8 clk, U8 baud)
 118          {
 119   1          U8 m_u8i;
 120   1          EA = 1;                  /*must open the total interruption */
 121   1          /*open the serial interruption ,
 122   1          if you send only and don't need taking an interrupt0 ,
 123   1          presetting to 0*/
 124   1          ES = 1;                
 125   1          Uart_Enable(UART_REN_ENABEL | UART_BRT_ENABLE | UART_IOMUX_ENABLE);
 126   1          m_u8i = Uart_Baud_Set(clk,baud);
 127   1          return m_u8i;
 128   1      }
 129          /**
 130            * @brief Uart send onebyte
 131            * @param dat: the data to send
 132            * @retval None
 133            */
 134          void Uart0_Onebyte_Send(U8 dat)
 135          {
 136   1          ES = 0;
 137   1          SBUF0 = dat;
 138   1          while(!S0TI);
 139   1          S0TI = 0;
 140   1          /*if you need interrupt0 or receive interrupt0 at the same time presetting to 1 ,
 141   1          otherwise presetting to 0*/
 142   1          ES = 1;
 143   1      }
 144          /**
 145            * @brief Uart send more than one byte
 146            * @param buf: the array to send
 147            * @param len: the length of buf
 148            * @retval None
 149            */
 150          void Uart0_Bytes_Send(U8 *buf,U8 len)
 151          {
 152   1          U8 m_u8j;
 153   1          ES = 0;
 154   1          for(m_u8j = 0;m_u8j < len;m_u8j++)
 155   1          {
 156   2              SBUF0 = buf[m_u8j];
 157   2              while(!S0TI);
 158   2              S0TI = 0;
 159   2          }
 160   1          /*presetting to 1 if you need interrupt0 or receive interrupt0 at the same time,
 161   1          otherwise presetting to 0*/
 162   1          ES = 1;
 163   1      }
 164          /**
 165            * @brief Uart receive more than one byte
 166            * @param first: the array to send
 167            * @param len: the length of received data
 168            * @retval None
 169            */
 170          void Uart0_Receive_Bytes(U8 first,U8 len)
 171          {
 172   1          if(Uart0_Receive_Onebyte() == first)
 173   1          {
 174   2              g_u8Check_Flag = 1;
 175   2          }
 176   1          if(g_u8Check_Flag)
 177   1          {
C51 COMPILER V9.00   UART                                                                  04/19/2017 13:52:39 PAGE 4   

 178   2              ga_u8Rec_Buff[g_u8Uart0_RecTimes] = SBUF0;
 179   2              g_u8Uart0_RecTimes++;
 180   2              if(g_u8Uart0_RecTimes >= len)
 181   2              {
 182   3                  g_u8Check_Flag = 0;
 183   3                  g_u8Uart0_RecTimes = 0;
 184   3              }
 185   2          }
 186   1      }
 187          /**
 188            * @brief Uart send one byte
 189            * @param None
 190            * @retval the data erceived
 191            */
 192          U8 Uart0_Receive_Onebyte(void)
 193          {
 194   1          U8 m_u8Rec;
 195   1          m_u8Rec = SBUF0;
 196   1          return m_u8Rec;
 197   1      }
 198          /******************** (C) COPYRIGHT Silan Microelectronics *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
